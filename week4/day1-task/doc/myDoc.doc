What is Redux ?
Redux is a state management library for JavaScript applications. 
It provides a centralized way to manage and update application state through a unidirectional data flow.
This is particularly useful in large, complex applications where managing state across multiple 
components or modules becomes hard to maintain and debug.

It is inspired by Flux architecture, developed at Facebook, and based on the principles of functional 
programming and immutable data structures.

🔁 Redux Data Flow (Unidirectional)
Redux enforces a strict one-way data flow, which simplifies understanding and debugging.

Here's the sequence of the flow:

An event (e.g., user interaction or API response) occurs in the application.

A corresponding action is created and dispatched to the Redux store.

The store passes the current state and the action to the reducer.

The reducer returns a new state object (without mutating the original).

The store saves the new state and notifies all subscribers.

The UI (or any other subscriber) reads the updated state via getState().

🧱 Redux Core Concepts in Full Detail
1. 🏬 Store
The store is the central entity in Redux. It holds the entire state tree of your application.

Key roles of the store:
Maintains the current state.

Allows state retrieval via getState().

Allows state updates via dispatch(action).

Allows observers to subscribe/unsubscribe via subscribe(listener).

A Redux app usually has only one store, although it's possible (though discouraged) to use multiple.

2. 📦 State
The state in Redux is a JavaScript object that represents the entire application's data at a point in 
time.

It is read-only, which means it cannot be changed directly. You must dispatch actions to update it.

The shape of the state depends entirely on how you design your reducers.

3. 🎯 Action
An action is a plain JavaScript object that describes an event that occurred.

It must have a type field, which is a string constant describing the event type.

Additional fields can be included to pass data—typically under a payload key.

Why actions?
They are the only source of information for the store. All state changes happen because an action was 
dispatched.

4. 🧰 Action Creators
These are functions that return action objects.

They encapsulate the action-creation logic and keep the action-dispatching code clean and reusable.

Purpose:
Ensures consistency in the shape of actions.

Makes it easier to abstract business logic (especially when dealing with async actions using middleware
 like thunk).

5. 🧠 Reducer
A reducer is a pure function that:

Takes the previous state and an action

Returns a new state

Characteristics:
Pure: It doesn't mutate the input state or produce side effects.

Must return a new object even if only part of the state changes.

Must not perform tasks like API calls, logging, or random number generation—those go in middleware.

You can have multiple reducers, each managing its own slice of the state.

6. 🧩 combineReducers()
When your app grows, it's practical to split the state and reducer logic into slices
(e.g., auth, cart, user). combineReducers() helps merge them into one root reducer that can be passed 
into the store.

Behavior:
Maps each key of the root state to its corresponding reducer function.

Delegates the handling of each slice of the state.

7. 📢 Dispatch
This is how actions are sent to the store.

It is a store method that accepts an action and sends it to the reducer.

The reducer processes it and returns a new state.

8. 🧏‍♂️ Subscribe
subscribe(listener) is used to register a function that runs every time the state changes.

Useful for:

Updating the UI

Logging

Triggering animations

It returns an unsubscribe function, which can be called to remove the listener.

⚙️ Middleware (Optional)
Middleware in Redux sits between dispatch(action) and the moment it reaches the reducer.

Purpose:
Side effects (e.g., API calls, async actions)

Logging actions

Crash reporting

Routing control

Signature:
A middleware is a function that returns another function, allowing for function chaining.

Redux provides applyMiddleware() to add one or more middleware functions when creating the store.

🔄 Redux Lifecycle in Depth
Let’s break down the full process step-by-step:

Application starts: A store is created using a root reducer.

UI Component triggers an event, like a user clicking a button.

An action creator function is called and returns an action.

The action is dispatched using store.dispatch(action).

Redux passes the action and current state to the root reducer.

The reducer(s) return a new state (without mutating the old one).

The store saves the new state internally.

All subscribed listeners are notified of the state change.

The UI re-renders or updates based on the new state.

🔐 Key Rules in Redux
State is immutable: Never mutate state directly.

Reducers must be pure functions.

Only dispatch actions to update the state.

The store is the single source of truth.

Always return a new state object from a reducer.

🧾 Syntax Summary
Concept	Syntax (General)
Store creation	createStore(reducer)
Get state	store.getState()
Dispatch action	store.dispatch(action)
Subscribe	store.subscribe(listener)
Combine reducers	combineReducers({ key: reducer })
Middleware	applyMiddleware(middleware1, middleware2)
Action structure	{ type: 'TYPE', payload: optionalData }

🧮 Example Redux State Structure (Purely Conceptual)

const state = {
  user: {
    name: 'Alice',
    isLoggedIn: true
  },
  cart: {
    items: [/* array of products */],
    total: 99.99
  },
  ui: {
    theme: 'dark',
    loading: false
  }
};
Each part of this state could be handled by a different reducer.

✅ When to Use Redux
Redux is most useful when:

Your application has complex state that is shared across many components.

You need predictable state transitions.

You want easy debugging with time-travel capabilities.

You are building an enterprise-level application with team collaboration.

